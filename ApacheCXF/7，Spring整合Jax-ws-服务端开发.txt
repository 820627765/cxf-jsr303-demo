1,Spring 整合 Jax-WS 开发，我这里就使用 springboot 项目来代替springMVC项目来实现 和 spring 的整合。
  1.1 新建项目  cxf-jax-ws-spring-server
  1.2 加入依赖
      <parent>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-parent</artifactId>
          <version>2.5.2</version>
      </parent>

      <groupId>org.example</groupId>
      <artifactId>cxf-jax-ws-spring-server</artifactId>
      <version>1.0-SNAPSHOT</version>

      <dependencies>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>
          </dependency>
      </dependencies>
  1.3 新建springboot应用的主启动类
      @SpringBootApplication
      public class Application {
          public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
          }
      }
  1.4 配置xml，配置发布jax-ws 服务，然后在著启动类配置加载该配置类
      <!--发布接口
          address 用于指定webservice 服务的访问根路径，即:http://ip:port/应用上下文根/webservice的address
          serviceClass 指定要发布的webservice接口全路径
          <jawx:server> 标签就等同于 JaxWsSrverFactoryBean 工厂bean，address 设置工厂bean的属性
                        serviceClass 属性设置服务接口
          <jawx:serviceBean> 用于设置服务对象的实现类

      -->
      <jawx:server address="/userService" serviceClass="com.example.service.UserService">
          <!--指定服务对应的实现类对象-->
          <jawx:serviceBean>
              <bean class="com.example.service.impl.UserServiceImpl"/>
          </jawx:serviceBean>

          <!--设置输入拦截器-->
          <jawx:inInterceptors>
              <bean class="org.apache.cxf.interceptor.LoggingInInterceptor"/>
          </jawx:inInterceptors>
          <!--设置输出拦截器-->
          <jawx:outInterceptors>
              <bean class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>
          </jawx:outInterceptors>
      </jawx:server>
  1.5 配置springboot 加载该配置文件的配置
      在主启动类上加上注解 @ImportResource(value = {"classpath:applicationContext.xml"})

  1.6 配置 CXF 所需要的 CXFServlet，该Servlet 需要应用启动就实例化

